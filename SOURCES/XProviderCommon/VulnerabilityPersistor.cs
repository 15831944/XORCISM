using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using XORCISMModel;
using XVULNERABILITYModel;
using XCommon;
using System.Net;

using System.Security.Cryptography;


namespace XProviderCommon
{
    /// <summary>
    /// Copyright (C) 2012-2015 Jerome Athias
    /// XORCISM XProviderCommon
    /// All trademarks and registered trademarks are the property of their respective owners.
    /// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
    /// 
    /// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
    /// 
    /// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
    /// </summary>
    public class VulnerabilityPersistor
    {
        public static XVULNERABILITYEntities vuln_model = new XVULNERABILITYEntities();

        public static int Persist(VulnerabilityFound detail, VulnerabilityEndPoint endpoint, int jobID, string providerName, XORCISMModel.XORCISMEntities m_model) // , out List<VULNERABILITYFOUND> MyVulnList)
        {
            int theEndPointID = 0;

            Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Looking for an asset with IP address {0}", endpoint.IpAdress));

            var J = from oJ in m_model.JOB
                    where oJ.JobID == jobID
                    select oJ;

            JOB xJob = J.FirstOrDefault();
            
            Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("JOB => {0}", xJob.JobID));
            
            ASSET myAsset = new ASSET();
            //TODO Hardcoded
            if (xJob.ProviderID == 3 || xJob.ProviderID == 13 || xJob.ProviderID == 14 || xJob.ProviderID == 15 || xJob.ProviderID == 21 || xJob.ProviderID == 24)
            {
                //nmap, import nessus, netsparker, acunetix
                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("CASE 1"));
                //TODO  ipaddressIPv4
                //o.JobID == jobID && 
                var ipAsset = from o in m_model.ASSET
                              where o.ipaddressIPv4 == endpoint.IpAdress
                              select o;

                if (ipAsset.Count() == 0 || ipAsset == null)
                {
                    //Asset imported and created in a previous job
                    Guid guid = new Guid(xJob.SESSION.UserID.ToString());
                    USERACCOUNT theAccount = m_model.USERACCOUNT.Single(c => c.UserID.Value.Equals(guid));
                    //TODO  ipaddressIPv4
                    //o.AccountID == theAccount.AccountID &&
                    ipAsset = from o in m_model.ASSET
                              where o.ipaddressIPv4 == endpoint.IpAdress
                              select o;
                    if (ipAsset.Count() == 0 || ipAsset == null)
                    {
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("ASSETS = NULL"));
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", "xJob.SESSION.UserID=" + xJob.SESSION.UserID);
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", "theAccount.AccountID=" + theAccount.AccountID);
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", "endpoint.IpAdress=" + endpoint.IpAdress);
                        return -1;
                    }
                }

                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("FIND ASSET >> OK ipAsset.Count() = {0}",ipAsset.Count()));
                myAsset = ipAsset.FirstOrDefault();

                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("CASE 1 : ASSET ID => {0}",myAsset.AssetID ));
            }
            else
            {
                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("CASE 2"));

                var ipAsset = from o in m_model.JOB
                              where o.JobID == jobID
                              select o.ASSETSESSION.ASSET;

                ASSET tmpAsset = ipAsset.FirstOrDefault();

                var asset = from Assets in m_model.ASSET
                            //where Assets.IpAdress == tmpAsset.IpAdress
                            where Assets.AssetID == tmpAsset.AssetID
                            select Assets;

                myAsset = asset.FirstOrDefault();

                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("CASE 2 : ASSET ID => {0}",myAsset.AssetID ));
            }            

            Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Retrieving the endpoints [AssetID : {0}]",myAsset.AssetID));            

            ENDPOINT endPoint = new ENDPOINT();
            var EP = from Epoint in m_model.ENDPOINT
                     where Epoint.AssetID == myAsset.AssetID && Epoint.SessionID == xJob.SessionID
                     select Epoint;            

            if (EP == null || EP.ToList().Count == 0)
            {
                //Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("No endpoint found, creating a new one (port={0}, proto={1}, service={2})", endpoint.Port, endpoint.Protocol, endpoint.Service));

                if (endpoint.Service == "")
                {
                    //Use the PORT referential table (improved IANA) to retrieve the service
                    var ports = from portref in m_model.PORT
                                where portref.DefaultProtocolName == endpoint.Protocol && portref.Port_Value == endpoint.Port
                                select portref;

                    if (ports.Count() > 0)
                    {
                        PORT thePort = ports.FirstOrDefault();
                        endpoint.Service = thePort.DefaultServiceName.Trim();
                    }
                    else
                    {
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", "No referential found for port:"+endpoint.Protocol+"/"+endpoint.Port);
                    }
                }
                else
                {
                    if (endpoint.Port == -1 && endpoint.Protocol == "")
                    {
                        //Use the PORT referential table to retrieve the port/protocol
                        var ports = from portref in m_model.PORT
                                    where portref.DefaultServiceName == endpoint.Service
                                    select portref;

                        if (ports.Count() > 0)
                        {
                            PORT thePort = ports.FirstOrDefault();
                            //endpoint.Service = thePort.Service.Trim();
                            endpoint.Port = (int)thePort.Port_Value;
                            endpoint.Protocol = thePort.DefaultProtocolName;
                        }
                    }
                    else
                    {
                        //Check if the port/protocol/service is the same in the referential
                        //Use the PORT referential table to retrieve the service
                        var ports = from portref in m_model.PORT
                                    where portref.DefaultProtocolName == endpoint.Protocol && portref.Port_Value == endpoint.Port
                                    select portref;

                        if (ports.Count() > 0)
                        {
                            PORT thePort = ports.FirstOrDefault();
                            if (endpoint.Service != thePort.DefaultServiceName)
                            {
                                Utils.Helper_Trace("XORCISM PROVIDER COMMON", "DEBUG The endpoint service was:"+endpoint.Service+" replaced by referential:"+thePort.DefaultServiceName);
                            }
                            endpoint.Service = thePort.DefaultServiceName.Trim();
                        }
                    }
                }

                Utils.Helper_Trace("XORCISM PROVIDER COMMON", "Adding new endpoint:" + endpoint.Protocol + "/" + endpoint.Port + " (" + endpoint.Service + ")");

                ENDPOINT tmpEP = new ENDPOINT();
                tmpEP.PortNumber = (int?)endpoint.Port;
                tmpEP.ProtocolName = endpoint.Protocol.Trim();
                tmpEP.Service = endpoint.Service.Trim().ToUpper();
                tmpEP.AssetID = myAsset.AssetID;
                tmpEP.SessionID = xJob.SessionID;
                //TODO
                m_model.ENDPOINT.Add(tmpEP);
                m_model.SaveChanges();

                theEndPointID = tmpEP.EndPointID;
            }
            else
            {
                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Found {0} enpoints", EP.ToList().Count));
                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Looking for the right endpoint"));

                foreach (ENDPOINT E in EP.ToList())
                {
                    if (E.ProtocolName.Trim() == endpoint.Protocol.Trim() && E.PortNumber == endpoint.Port) // && E.Service == endpoint.Service)
                    {
                        theEndPointID = E.EndPointID;
                        break;
                    }
                    else
                    {
                        //Saint case where
                        //Service = 3389
                        //Port = 
                        //Protocol = 
                        //from:
                        //<vuln_details>
				        //Service: 3389
                        if (endpoint.Protocol.Trim() == "" && endpoint.Port==-1)
                        {
                            int num;
                            bool isNumeric = int.TryParse(endpoint.Service, out num);
                            if (isNumeric)
                            {
                                // endpoint.Service is number
                                if (E.PortNumber == num)
                                {
                                    theEndPointID = E.EndPointID;
                                    break;
                                }
                            }
                            else
                            {
                                // value is not a number
                            }
                        }
                    }
                }

                if (theEndPointID == 0)
                {
                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Could not find the endpoint"));
                    //Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Creating a new one (port={0}, proto={1}, service={2})", endpoint.Port, endpoint.Protocol, endpoint.Service));

                    if (endpoint.Service == "")
                    {
                        //Use the PORT referential table to retrieve the service
                        var ports = from portref in m_model.PORT
                                    where portref.DefaultProtocolName == endpoint.Protocol && portref.Port_Value == endpoint.Port
                                    select portref;

                        if (ports.Count() > 0)
                        {
                            PORT thePort = ports.FirstOrDefault();
                            endpoint.Service = thePort.DefaultServiceName.Trim();
                        }
                        else
                        {
                            Utils.Helper_Trace("XORCISM PROVIDER COMMON", "No referential found for port:" + endpoint.Protocol + "/" + endpoint.Port);
                        }
                    }
                    else
                    {                        
                        if (endpoint.Port == -1 && endpoint.Protocol == "")
                        {
                            //Use the PORT referential table to retrieve the port/protocol
                            string testService = endpoint.Service.Trim().ToUpper();
                            //TODO Review IANA
                            //Harmonizing this (e.g. Nessus)
                            //HARDCODED
                            if (testService == "HTTP")
                            {
                                testService = "WWW";
                            }
                            if (testService == "HTTPS")
                            {
                                testService = "WWW (SECURE)";
                            }
                            if (testService == "3389")
                            {
                                testService = "RDP";
                            }
                            if (testService == "FTP (WITH ANONYMOUS) ")
                            {
                                testService = "FTP";
                            }
                            var ports = from portref in m_model.PORT
                                        where portref.DefaultServiceName == testService
                                        select portref;

                            if (ports.Count() > 0)
                            {
                                PORT thePort = ports.FirstOrDefault();
                                //endpoint.Service = thePort.Service;
                                endpoint.Protocol = thePort.DefaultProtocolName.Trim();
                                endpoint.Port = (int)thePort.Port_Value;
                            }
                            else
                            {
                                Utils.Helper_Trace("XORCISM PROVIDER COMMON", "DEBUG No referential found for service:" + endpoint.Service);
                            }
                        }
                        else
                        {
                            //Check if the port/protocol/service is the same in the referential
                            //Use the PORT referential table to retrieve the service
                            var ports = from portref in m_model.PORT
                                        where portref.DefaultProtocolName == endpoint.Protocol && portref.Port_Value == endpoint.Port
                                        select portref;

                            if (ports.Count() > 0)
                            {
                                PORT thePort = ports.FirstOrDefault();
                                if (endpoint.Service != thePort.DefaultServiceName)
                                {
                                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", "The endpoint service was:" + endpoint.Service + " replaced by referential:" + thePort.DefaultServiceName);
                                }
                                endpoint.Service = thePort.DefaultServiceName.Trim();
                            }
                        }
                    }

                    //Check again
                    foreach (ENDPOINT E in EP.ToList())
                    {
                        if (E.ProtocolName.Trim() == endpoint.Protocol.Trim() && E.PortNumber == endpoint.Port) // && E.Service == endpoint.Service)
                        {
                            theEndPointID = E.EndPointID;
                            break;
                        }
                    }

                    if (theEndPointID == 0)
                    {
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", "Adding endpoint:" + endpoint.Protocol + "/" + endpoint.Port + " (" + endpoint.Service + ")");

                        ENDPOINT tmpEP = new ENDPOINT();
                        tmpEP.PortNumber = (int?)endpoint.Port;
                        tmpEP.ProtocolName = endpoint.Protocol;
                        tmpEP.Service = endpoint.Service;
                        tmpEP.AssetID = myAsset.AssetID;
                        tmpEP.SessionID = xJob.SessionID;

                        m_model.ENDPOINT.Add(tmpEP);
                        m_model.SaveChanges();

                        theEndPointID = tmpEP.EndPointID;
                    }
                    else
                    {
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Endpoint found after research: {0}", theEndPointID));
                    }
                }
                else
                {
                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Endpoint found: {0}", theEndPointID));
                }
            }            

            // =========================
            // In case there is no CVEID
            // =========================
            #region no cve
            //TODO
            //VULNERABILITYFOUND vulnFound;
            if (detail.ListItem.Count == 0)
            {
                // ==========================
                // Handle table VULNERABILITY
                // ==========================

                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Searching for a " + providerName + " entry in table VULNERABILITY"));
                //string myValueMD5 = CreateMD5Hash(detail.InnerXml);
                var syn1 = from S in vuln_model.VULNERABILITY
                           where S.VULReferential.Equals(providerName) &&
                           S.VULReferentialID == detail.InnerXml
                           && S.VULName == detail.Title   //TODO: FOR UPDATES ONLY!!! REMOVE IT AFTER SOME TIME AND DELETE VULNERABILITY with Title=""
                           //S.ValueMD5 == myValueMD5
                           select S;
                if (syn1.Count() == 0)
                {
                    syn1 = from S in vuln_model.VULNERABILITY
                           where S.VULReferential.Equals(providerName) &&
                           S.VULName==detail.Title &&
                           S.VULDescription==detail.Description
                           //S.ValueMD5 == myValueMD5
                           select S;
                }
                VULNERABILITY VS;

                if (syn1.Count() == 0)
                {
                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("No entry found, creating a new " + providerName + " entry in VULNERABILITY"));

                    //TODO
                    VS = new VULNERABILITY();
                    VS.VULReferential = providerName;   //nessus
                    VS.VULReferentialID = detail.InnerXml;
                    //VS.ValueMD5 = CreateMD5Hash(detail.InnerXml);
                    VS.VULDescription = detail.Description;
                    VS.VULConsequence = detail.Consequence;
                    VS.VULSolution = detail.Solution;
                    //VS.PatchUpgrade=detail.PatchUpgrade;
                    VS.CVSSBaseScore = detail.CVSSBaseScore;
                    //VS.ModifiedDate = detail.ModifiedDate;
                    VS.VULName = detail.Title;
                    //VS.PCI_FLAG = detail.PCI_FLAG;
                    //VS.Result = detail.Result;
                    //VS.Url = detail.Url;
                    //VS.Message = detail.Message;
                    //VS.HarmScore = detail.HarmScore;
                    //VS.Type = detail.Type;
                    //VS.DetailedInformation = detail.DetailedInformation;
                    //VS.Exploitable = detail.Exploitable;
                    
                    //Dealing with CWEs
                    #region CWEs
                    string temptitle = detail.Title.ToLower();
                    FindCWEsForVULNERBILITY(temptitle, VS);
                    
                    #endregion CWEs
                    
                    //*********************************************************
                    //Dealing with CPEs         
                    VS = findCPES(VS, detail.Description, m_model); //, vuln_model);
                    
                    //HARDCODED Tentative
                    #region CPEs
                    /*
                    if (detail.Description.Contains("in Microsoft Internet Information Services (IIS) 5.1 through 6.0")) //Saint
                    {
                        CPE myCPE = (from cp in m_model.CPE
                                        where cp.CPEID.Equals("cpe:/a:microsoft:iis:5.1")
                                        select cp).FirstOrDefault();
                        if (myCPE != null)
                        {
                            VS.CPE.Add(myCPE);
                        }
                        myCPE = (from cp in m_model.CPE
                                    where cp.CPEID.Equals("cpe:/a:microsoft:iis:6.0")
                                    select cp).FirstOrDefault();
                        if (myCPE != null)
                        {
                            VS.CPE.Add(myCPE);
                        }
                    }
                    else
                    {
                        
                        if (detail.Description.Contains("in Microsoft Internet Information Services (IIS) 5.0, 5.1, and 6.0")) //Saint
                        {
                            CPE myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:microsoft:iis:5.0")
                                            select cp).FirstOrDefault();
                            if (myCPE != null)
                            {
                                VS.CPE.Add(myCPE);
                            }
                            myCPE = (from cp in m_model.CPE
                                        where cp.CPEID.Equals("cpe:/a:microsoft:iis:5.1")
                                        select cp).FirstOrDefault();
                            if (myCPE != null)
                            {
                                VS.CPE.Add(myCPE);
                            }
                            myCPE = (from cp in m_model.CPE
                                        where cp.CPEID.Equals("cpe:/a:microsoft:iis:6.0")
                                        select cp).FirstOrDefault();
                            if (myCPE != null)
                            {
                                VS.CPE.Add(myCPE);
                            }
                        }
                        else
                        {
                            
                            #region Apache Tomcat 5.5.x
                            if (detail.Description.Contains("Apache Tomcat 5.5.x before 5.5.34, 6.x before 6.0.33, and 7.x before 7.0.17")) //Saint
                            {
                                CPE myCPE = (from cp in m_model.CPE
                                                where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.0")
                                                select cp).FirstOrDefault();
                                
                                if (myCPE != null){ VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.1")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.10")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.11")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.12")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.13")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.14")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.15")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.16")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.17")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.18")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.19")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.2")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.20")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.21")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.22")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.23")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.24")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.25")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.26")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.27")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.28")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.29")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.3")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.30")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.31")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.32")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:5.5.33")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                
                                //-----------------------------------------------------------
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.0")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.1")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.10")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.11")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.12")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.13")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.14")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.15")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.16")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.17")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.18")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.19")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.2")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.20")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.21")   //inexistant
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); 
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.22")   //inexistant
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); 
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.23")   //inexistant
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE);
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.24")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.25")   //inexistant
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.26")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.27")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.28")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.29")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.3")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.30")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.31")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:6.0.32")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                
                                //-----------------------------------------------------------
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.0")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.0:beta")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.1")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.10")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.11")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.12")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.13")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.14")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.15")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                myCPE = (from cp in m_model.CPE
                                            where cp.CPEID.Equals("cpe:/a:apache:tomcat:7.0.16")
                                            select cp).FirstOrDefault();
                                if (myCPE != null) { VS.CPE.Add(myCPE); }
                                
                            }
                            #endregion Apache Tomcat 5.5.x
                            
                        }
                        
                    }
                    */
                    #endregion CPEs


                    vuln_model.VULNERABILITY.Add(VS);
                    vuln_model.SaveChanges();

                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("New entry for " + providerName + " created in VULNERABILITY with ID={0}",VS.VulnerabilityID));

                    AddPatch(VS, detail, m_model);

                    //References
                    foreach (VulnerabilityFound.Reference currrentref in detail.ListReference)
                    {
                        var testref = from rs in m_model.REFERENCE
                                      where rs.ReferenceURL == currrentref.Url //&& rs.Source == currrentref.Source && rs.Title == currrentref.Title
                                      select rs;
                        if (testref.Count() == 0)
                        {
                            Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Adding a new REFERENCE"));
                            REFERENCE newRef = new REFERENCE();
                            newRef.Source = currrentref.Source;
                            newRef.ReferenceTitle = currrentref.Title;
                            newRef.ReferenceURL = currrentref.Url;
                            //TODO
                            newRef.CreatedDate = DateTimeOffset.Now;
                            newRef.timestamp = DateTimeOffset.Now;
                            m_model.REFERENCE.Add(newRef);
                            m_model.SaveChanges();
                            //Mapping VULNERABILITYFORREFERENCE
                            //TODO
                            //VS.REFERENCE.Add(newRef);

                            m_model.SaveChanges();
                        }
                        else
                        {
                            //TODO
                            /*
                            REFERENCE foundref = testref.FirstOrDefault();
                            var verifref = from vr in foundref.VULNERABILITY
                                           where vr.VulnerabilityID == VS.VulnerabilityID
                                           select vr;
                            if (verifref.Count() == 0)
                            {
                                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Update REFERENCE for VULNERABILITY"));
                                VS.REFERENCE.Add(foundref);
                                m_model.SaveChanges();
                            }
                            */

                        }
                    }//foreach
                }
                else
                {
                    VS = syn1.First();
                    AddPatch(VS, detail, m_model);

                    //References (update)
                    foreach (VulnerabilityFound.Reference currrentref in detail.ListReference)
                    {
                        var testref = from rs in m_model.REFERENCE
                                      where rs.ReferenceURL == currrentref.Url //&& rs.Source == currrentref.Source && rs.Title == currrentref.Title
                                      select rs;
                        if (testref.Count() == 0)
                        {
                            Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Adding new entry in REFERENCE"));
                            REFERENCE newRef = new REFERENCE();
                            newRef.Source = currrentref.Source;
                            newRef.ReferenceTitle = currrentref.Title;
                            newRef.ReferenceURL = currrentref.Url;

                            newRef.CreatedDate = DateTimeOffset.Now;
                            newRef.timestamp = DateTimeOffset.Now;
                            m_model.REFERENCE.Add(newRef);
                            m_model.SaveChanges();
                            //Mapping VULNERABILITYFORREFERENCE
                            //TODO
                            //VS.REFERENCE.Add(newRef);

                            m_model.SaveChanges();
                        }
                        else
                        {                            
                            //TODO
                            /*
                            REFERENCE foundref=testref.FirstOrDefault();
                            var verifref = from vr in foundref.VULNERABILITY
                                           where vr.VulnerabilityID == VS.VulnerabilityID
                                           select vr;
                            if (verifref.Count() == 0)
                            {
                                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Updating REFERENCE for VULNERABILITY"));
                                VS.REFERENCE.Add(foundref);
                                m_model.SaveChanges();
                            }
                            */

                        }
                    }//foreach
                }
                
                // ===============================
                // Handle table VULNERABILITYFOUND
                // ===============================

                //TODO
                //FINDING
                /*
                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Adding a new entry in table VULNERABILITYFOUND"));
                
                vulnFound = new VULNERABILITYFOUND();

                vulnFound.EndPointID = theEndPointID;
                vulnFound.JobID = jobID;
                vulnFound.Severity = detail.Severity;
                vulnFound.Result = detail.Result;
                vulnFound.Url = detail.Url;
                vulnFound.VulnerableParameterType = detail.VulnerableParameterType; //Netsparker
                vulnFound.VulnerableParameter = detail.VulnerableParameter; //Netsparker
                vulnFound.VulnerableParameterValue = detail.VulnerableParameterValue; //Netsparker
                vulnFound.rawrequest = detail.rawrequest; //Netsparker
                vulnFound.rawresponse = detail.rawresponse; //Netsparker
                //vulnFound.CVSSBaseScore = detail.CVSSBaseScore;
                vulnFound.IsFalsePositive = detail.IsFalsePositive; //Acunetix

                m_model.AddToVULNERABILITYFOUND(vulnFound);
                m_model.SaveChanges();

                // =================================
                // Handle table VULNERABILITYMAPPING
                // =================================

                vulnFound.VULNERABILITY.Add(VS);
                m_model.SaveChanges();

                // list.Add(MyVuln);
                */

            }

            #endregion

            // ===============================
            // Handle table VULNERABILITYFOUND
            // ===============================
            else
            {
                //TODO FINDING
                /*
                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Creating a new entry in table VULNERABILITYFOUND"));
                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("JOB = {0}", jobID));
                
                vulnFound = new VULNERABILITYFOUND();

                vulnFound.EndPointID = theEndPointID;
                vulnFound.JobID = jobID;
                vulnFound.Severity = detail.Severity;
                vulnFound.Result = detail.Result;
                vulnFound.Url = detail.Url;
                vulnFound.VulnerableParameterType = detail.VulnerableParameterType; //Netsparker
                vulnFound.VulnerableParameter = detail.VulnerableParameter; //Netsparker
                vulnFound.VulnerableParameterValue = detail.VulnerableParameterValue; //Netsparker
                vulnFound.rawrequest = detail.rawrequest; //Netsparker
                vulnFound.rawresponse = detail.rawresponse; //Netsparker
                vulnFound.IsFalsePositive = detail.IsFalsePositive; //Acunetix

                m_model.AddToVULNERABILITYFOUND(vulnFound);
                m_model.SaveChanges();
                */

            }
            // ====================================
            // In case there is at least one CVEID
            // ====================================
            #region VULNERABILITYCVE

            foreach (VulnerabilityFound.Item item in detail.ListItem)
            {
                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Handling CVE {0}", item.Value));

                // =================================
                // Search VULNERABILITY for this CVE
                // =================================                

                if (item.ID != "cve")   //Hardcoded
                {
                    var syn = from S in vuln_model.VULNERABILITY
                              where S.VULReferential.Equals(item.ID) &&
                              S.VULReferentialID.Equals(item.Value)
                              select S;
                    if (syn.Count() == 0)
                    {
                        syn = from S in vuln_model.VULNERABILITY
                              where S.VULReferential.Equals(providerName) &&
                               S.VULName == detail.Title &&
                               S.VULDescription == detail.Description
                               //S.ValueMD5 == myValueMD5
                               select S;
                    }

                    if (syn.Count() == 0)
                    {
                        VULNERABILITY v = new VULNERABILITY();
                        v.VULReferential = item.ID;
                        v.VULReferentialID = item.Value;
                        //v.PatchUpgrade = false; //TODO A VOIR?
                        //TODO
                        //vulnFound.VULNERABILITY.Add(v);                        
                        vuln_model.SaveChanges();

                        AddPatch(v, detail, m_model);                        
                    }
                    else
                    {
                        //TODO
                        //vulnFound.VULNERABILITY.Add(syn.ToList()[0]);
                        vuln_model.SaveChanges();
                    }                    
                }
                else  //cve
                {
                    var syn = from S in vuln_model.VULNERABILITY
                              where S.VULReferential.Equals("cve") &&
                              S.VULReferentialID.Equals(item.Value)
                              select S;

                    if (syn.Count() == 0)
                    {
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("ERRORCVE : CVEID {0} not found in VULNERABILITY", item.Value));
                        continue;
                    }

                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("This CVE corresponds to ID {0} in table VULNERABILITY", syn.ToList().First().VulnerabilityID));
                    
                    // =================================================================
                    // If necessary, creates an entry in VULNERABILITY for this Provider
                    // =================================================================

                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Searching for a " + providerName + " CVE entry in table VULNERABILITY"));
                    //string myValuedMD5 = CreateMD5Hash(detail.InnerXml);
                    var syn10 = from S in vuln_model.VULNERABILITY
                                where S.VULReferential.Equals(providerName) &&
                               S.VULReferentialID == detail.InnerXml
                               //S.ValueMD5 == myValuedMD5
                               select S;
                    if (syn10.Count() != 0)
                    {
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", "Entry found !!!!!!!!!!!!!!!!!");
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", "VulnerabilityID=" + syn10.ToList().First().VulnerabilityID);
                        //Utils.Helper_Trace("XORCISM PROVIDER COMMON", "detail.InnerXml=" + detail.InnerXml);

                        // =================================
                        // Handle table VULNERABILITYMAPPING
                        // =================================
                        //TODO
                        //vulnFound.VULNERABILITY.Add(syn.ToList()[0]);
                        //vuln_model.SaveChanges();
                    }
                    else
                    {
                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("No entry found, creating a new " + providerName + " CVE entry in VULNERABILITY"));
                        //Utils.Helper_Trace("XORCISM PROVIDER COMMON", "detail.InnerXml=" + detail.InnerXml);

                        //TODO
                        VULNERABILITY VS = new VULNERABILITY();
                        VS.VULReferential = providerName;
                        VS.VULReferentialID = detail.InnerXml;
                        //VS.ValueMD5 = CreateMD5Hash(detail.InnerXml);
                        VS.VULDescription = detail.Description;
                        VS.VULConsequence = detail.Consequence;
                        VS.VULSolution = detail.Solution;
                        //VS.PatchUpgrade=detail.PatchUpgrade;
                        VS.CVSSBaseScore = detail.CVSSBaseScore;
                        //VS.ModifiedDate = detail.ModifiedDate;
                        VS.VULName = detail.Title;
                        //VS.PCI_FLAG = detail.PCI_FLAG;
                        //VS.Result = detail.Result;
                        //VS.Url = detail.Url;
                        //VS.Message = detail.Message;
                        //VS.HarmScore = detail.HarmScore;    //Cenzic
                        //VS.Type = detail.Type;
                        //VS.DetailedInformation = detail.DetailedInformation;

                        //VS.Exploitable = detail.Exploitable;

                        //Dealing with CWEs
                        #region CWEs
                        string temptitle = detail.Title.ToLower();
                        FindCWEsForVULNERBILITY(temptitle, VS);
                        
                        #endregion CWEs

                        //*********************************************************
                        //Dealing with CPEs                        
                        VS = findCPES(VS, detail.Description, m_model); //, vuln_model);

                        vuln_model.VULNERABILITY.Add(VS);
                        vuln_model.SaveChanges();

                        Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("New entry created for " + providerName + " in VULNERABILITY with ID={0}", VS.VulnerabilityID));

                        AddPatch(VS, detail, m_model);

                        // =================================
                        // Handle table VULNERABILITYMAPPING
                        // =================================
                        //TODO
                        //vulnFound.VULNERABILITY.Add(VS);
                        //m_model.SaveChanges();

                        // =================================
                        // Handle table VULNERABILITYMAPPING for CVE
                        // =================================
                        //TODO
                        //vulnFound.VULNERABILITY.Add(syn.ToList()[0]);
                        //m_model.SaveChanges();



                        //TODO
                        /*
                        //References
                        #region References
                        foreach (VulnerabilityFound.Reference currrentref in detail.ListReference)
                        {
                            //TODO? Replace("http://www.","http://:)
                            var testref = from rs in m_model.REFERENCE
                                          where rs.ReferenceURL == currrentref.Url //&& rs.Source == currrentref.Source && rs.Title == currrentref.Title
                                          select rs;
                            if (testref.Count() == 0)
                            {
                                Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Adding new REFERENCE"));
                                REFERENCE newRef = new REFERENCE();
                                newRef.Source = currrentref.Source;
                                newRef.ReferenceTitle = currrentref.Title;
                                newRef.ReferenceURL = currrentref.Url;

                                newRef.CreatedDate = DateTimeOffset.Now;
                                newRef.timestamp = DateTimeOffset.Now;
                                m_model.REFERENCE.Add(newRef);
                                m_model.SaveChanges();
                                //Mapping VULNERABILITYFORREFERENCE
                                VS.REFERENCE.Add(newRef);
                                m_model.SaveChanges();                                
                            }
                            else
                            {
                                REFERENCE foundref = testref.FirstOrDefault();
                                var verifref = from vr in foundref.VULNERABILITY
                                               where vr.VulnerabilityID == VS.VulnerabilityID
                                               select vr;
                                if (verifref.Count() == 0)
                                {
                                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", "Adding a REFERENCE for VULNERABILITY");
                                    VS.REFERENCE.Add(foundref);
                                    m_model.SaveChanges();
                                }
                            }
                            //Check if we know an exploit for this ref
                            var sploitcheck = from s in m_model.EXPLOIT
                                              where s.Location == currrentref.Url
                                              select s;
                            if (sploitcheck.Count() != 0)
                            {
                                EXPLOIT sploit = sploitcheck.FirstOrDefault();
                                EXPLOITFORVULNERABILITY sploitvuln = new EXPLOITFORVULNERABILITY();
                                sploitvuln.VulnerabilityID = VS.VulnerabilityID;
                                sploitvuln.ExploitID = sploit.ExploitID;

                                sploitvuln.CreatedDate = DateTimeOffset.Now;
                                sploitvuln.timestamp = DateTimeOffset.Now;
                                //sploitvuln.VocabularyID=    //TODO
                                try
                                {
                                    m_model.EXPLOITFORVULNERABILITY.Add(sploitvuln);
                                    m_model.SaveChanges();
                                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", "AddedEXPLOITFORVULNERABILITY");
                                }
                                catch (FormatException ex)
                                {
                                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", "AddToEXPLOITFORVULNERABILITY01 Exception: "+ex.Message+" "+ex.InnerException);
                                }
                            }
                        }
                        #endregion References
                        */
                    }
                }
            }
            #endregion
            
            //TODO
            //return vulnFound.VulnerabilityFoundID;
            return 0;
        }

        public static string CreateMD5Hash(string input)
        {
            // Use input string to calculate MD5 hash
            MD5 md5 = System.Security.Cryptography.MD5.Create();
            byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(input);
            byte[] hashBytes = md5.ComputeHash(inputBytes);

            // Convert the byte array to hexadecimal string
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hashBytes.Length; i++)
            {
                sb.Append(hashBytes[i].ToString("X2"));
                // To force the hex string to lower-case letters instead of
                // upper-case, use he following line instead:
                // sb.Append(hashBytes[i].ToString("x2")); 
            }
            return sb.ToString();
        }

        public static CPE findONECPE(XORCISMModel.XORCISMEntities m_model, string myCPEID)
        {
            CPE myCPE = (from cp in m_model.CPE
                                where cp.CPEID.Equals(myCPEID)
                                select cp).FirstOrDefault();
            return myCPE;
        }

        public static VULNERABILITY findCPES(VULNERABILITY VS=null, string Description="", XORCISMModel.XORCISMEntities m_model=null)   //, XVULNERABILITYModel.XVULNERABILITYEntities vuln_model=null)
        {
            //TODO VULNERABILITYFORCPE
            //TODO Hardcoded
            /*
            if (Description.Contains("in Microsoft Internet Information Services (IIS) 5.1 through 6.0")) //Saint
            {
                CPE myCPE = findONECPE(m_model, "cpe:/a:microsoft:iis:5.1");                                
                if (myCPE != null) { VS.CPE.Add(myCPE); }
                myCPE = findONECPE(m_model, "cpe:/a:microsoft:iis:6.0");                            
                if (myCPE != null) { VS.CPE.Add(myCPE); }
            }
            else
            {
                if (Description.Contains("in Microsoft Internet Information Services (IIS) 5.0, 5.1, and 6.0")) //Saint
                {
                    CPE myCPE = findONECPE(m_model, "cpe:/a:microsoft:iis:5.0");                                    
                    if (myCPE != null) { VS.CPE.Add(myCPE); }
                    myCPE = findONECPE(m_model, "cpe:/a:microsoft:iis:5.1");                                
                    if (myCPE != null) { VS.CPE.Add(myCPE); }
                    myCPE = findONECPE(m_model, "cpe:/a:microsoft:iis:6.0");                                
                    if (myCPE != null) { VS.CPE.Add(myCPE); }
                }
                else
                {
                    if (Description.Contains("Apache Tomcat 5.5.x before 5.5.34, 6.x before 6.0.33, and 7.x before 7.0.17")) //Saint
                    {
                        CPE myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.0");                                      
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.1");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.10");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.11");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.12");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.13");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.14");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.15");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.16");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.17");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.18");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.19");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.2");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.20");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.21");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.22");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.23");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.24");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.25");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.26");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.27");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.28");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.29");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.3");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.30");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.31");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.32");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:5.5.33");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.0");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.1");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.10");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.11");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.12");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.13");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.14");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.15");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.16");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.17");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.18");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.19");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }                        
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.2");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.20");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.21"); //inexistant                  
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.22"); //inexistant
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.23"); //inexistant                     
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.24");
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.25"); //inexistant                     
                        if (myCPE != null) { VS.CPE.Add(myCPE); }                        
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.26");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.27");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.28");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.29");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.3");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.30");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.31");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:6.0.32");                              
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.0");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.0:beta");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.1");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.10");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.11");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.12");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.13");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.14");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.15");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                        myCPE = findONECPE(m_model, "cpe:/a:apache:tomcat:7.0.16");                                    
                        if (myCPE != null) { VS.CPE.Add(myCPE); }
                    }
                }
            }                       
            */
            return VS;
        }


        //public static void AddPatch(int VulnID, VulnerabilityFound detail, XORCISMModel.XORCISMEntities m_model)
        public static void AddPatch(VULNERABILITY myVULN, VulnerabilityFound detail, XORCISMModel.XORCISMEntities m_model)
        {
            // ============
            #region PATCH            
            
            
            if (detail.MSPatch != "")
            {             
                int thePatchID = 0;

                var PATCH = from Pat in m_model.PATCH
                            where Pat.PatchTitle == detail.MSPatch
                            select Pat;

                PATCH tmpPATCH;
                if (PATCH.ToList().Count == 0)
                {
                    Utils.Helper_Trace("XORCISM PROVIDER COMMON", string.Format("Patch {0} unknown. Adding it to the database.", detail.MSPatch));

                    tmpPATCH=new PATCH();
                    tmpPATCH.PatchTitle = detail.MSPatch;

                    //TODO
                    //tmpPATCH.VocabularyID=  //TODO
                    //tmpPATCH.RepositoryID=  //TODO
                    tmpPATCH.CreatedDate = DateTimeOffset.Now;
                    tmpPATCH.timestamp = DateTimeOffset.Now;
                    
                    m_model.PATCH.Add(tmpPATCH);
                    m_model.SaveChanges();

                    thePatchID=tmpPATCH.PatchID;
                }
                else
                {
                    tmpPATCH = PATCH.ToList().FirstOrDefault();
                    thePatchID=tmpPATCH.PatchID;                    
                }                

                // =================================
                // Handle table VULNERABILITYPATCH
                // =================================
                //TODO
                //VULNERABILITYPATCH
                ////tmpPATCH.VULNERABILITY.Add(myVULN);
                

                //var VulP = from VulPat in m_model.VULNERABILITYPATCH
                //                where VulPat.PatchID == thePatchID
                //                && VulPat.VulnerabilityID==VulnID
                //                select VulPat;
                //if (VulP.ToList().Count == 0)
                //{
                //    VULNERABILITYPATCH VP=new VULNERABILITYPATCH();
                //    VP.VulnerabilityID=VulnID;
                //    VP.PatchID=thePatchID;
                //    m_model.AddToVULNERABILITYPATCH(VP);
                //    m_model.SaveChanges();
                //}

                
            }

            #endregion
        }

        static void FindCWEsForVULNERBILITY(string temptitle, VULNERABILITY VS)
        {
            //HARDCODED (Because Security Vendors are st**ids)
            if (temptitle.Contains("Cross Site Scripting".ToLower()) || temptitle.Contains("Cross-Site Scripting".ToLower()))
            {
                string sCWEID = "CWE-79";
                AddNewVULNERABILITYCWE(VS, sCWEID);

                //TODO: CAPEC
                //[OWASP 2010 A 2]
                //[PCI 6.5.2]
            }
            if (temptitle.Contains("Blind SQL Injection".ToLower()) || temptitle.Contains("Blind SQL-Injection".ToLower()))
            {
                string sCWEID = "CWE-89";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-7: Blind SQL Injection"
            }
            else
            {
                if (temptitle == "SQL Injection Vulnerability".ToLower() || temptitle.Contains("SQL Injection".ToLower()) || temptitle.Contains("SQL-Injection".ToLower()))
                {
                    string sCWEID = "CWE-89";
                    AddNewVULNERABILITYCWE(VS, sCWEID);
                    //TODO "CAPEC-66: SQL Injection"
                }
            }
            if (temptitle.Contains("XPath Injection Vulnerability".ToLower()))
            {
                string sCWEID = "CWE-91";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-83: XPath Injection"
            }
            //http://www.cenzic.com/downloads/Cenzic_CWE.pdf
            if (temptitle.Contains("Application Exception".ToLower()))
            {
                string sCWEID = "CWE-388";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
            }
            if (temptitle.Contains("Application Path Exposure".ToLower()))
            {
                string sCWEID = "CWE-200";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
            }
            if (temptitle.Contains("Authentification Bypass".ToLower()))
            {
                string sCWEID = "CWE-89";   //TODO Review
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
            }
            if (temptitle.Contains("Authorization Boundary".ToLower()))
            {
                string sCWEID = "CWE-285";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
            }
            if (temptitle.Contains("Browse HTTP from HTTPS List".ToLower()))
            {
                string sCWEID = "CWE-200";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
            }
            if (temptitle.Contains("Brute Force Login".ToLower()))
            {
                string sCWEID = "CWE-521";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
            }
            if (temptitle.Contains("Buffer Overflow".ToLower()))
            {
                string sCWEID = "CWE-120";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
            }
            if (temptitle.Contains("Basic Auth over HTTP".ToLower()) || temptitle.Contains("HTTP Basic Authentication Enabled".ToLower()))
            {
                string sCWEID = "CWE-200";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
            }
            if (temptitle.Contains("Check HTTP Methods".ToLower()))
            {
                string sCWEID = "CWE-650";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
            }
            if (temptitle.Contains("Cookie Vulnerabilities".ToLower()))
            {
                string sCWEID = "CWE-539";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //TODO "CAPEC-
                sCWEID = "CWE-614";
                AddNewVULNERABILITYCWE(VS, sCWEID);
            }
            if (temptitle.Contains("Credit Card Disclosure".ToLower())) //PCI?
            {
                string sCWEID = "CWE-359";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Cross-Frame Scripting".ToLower()))
            {
                string sCWEID = "CWE-293";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Database Server Version".ToLower()))
            {
                string sCWEID = "CWE-200";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Detect Off-Site Images".ToLower()))
            {
                string sCWEID = "CWE-673";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Directory Browsing".ToLower()))
            {
                string sCWEID = "CWE-548";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Document Caching".ToLower()))
            {
                string sCWEID = "CWE-525";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("External Applet".ToLower()))
            {
                string sCWEID = "CWE-673";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Form Caching".ToLower()))
            {
                string sCWEID = "CWE-525";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Format String".ToLower()))
            {
                string sCWEID = "CWE-134";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("GET for POST".ToLower()))
            {
                string sCWEID = "CWE-20";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("JavaScript Comment".ToLower()))
            {
                string sCWEID = "CWE-615";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Response Splitting".ToLower()))
            {
                string sCWEID = "CWE-113";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Session Termination".ToLower()))
            {
                string sCWEID = "CWE-613";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Integer Overflow".ToLower()))
            {
                string sCWEID = "CWE-190";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
                sCWEID = "CWE-680";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("J2EE Session ID Length".ToLower()))
            {
                string sCWEID = "CWE-6";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("LDAP Injection".ToLower()))
            {
                string sCWEID = "CWE-90";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("LDAP Exception".ToLower()))
            {
                string sCWEID = "CWE-90";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
                sCWEID = "CWE-388";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Lockout".ToLower()))
            {
                string sCWEID = "CWE-521";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Login Redirect".ToLower()))
            {
                string sCWEID = "CWE-525";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Non-masked Password".ToLower()))
            {
                string sCWEID = "CWE-549";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Non-SSL Form".ToLower()))
            {
                string sCWEID = "CWE-201";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Non-SSL Page".ToLower()))
            {
                string sCWEID = "CWE-201";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Non-SSL Password".ToLower()))
            {
                string sCWEID = "CWE-201";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
                sCWEID = "CWE-261";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Open Redirect".ToLower()))
            {
                string sCWEID = "CWE-601";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Parameter Addition".ToLower()))
            {
                string sCWEID = "CWE-20";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Autocomplete".ToLower()))
            {
                string sCWEID = "CWE-525";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Password Change".ToLower()))
            {
                string sCWEID = "CWE-521";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Phishing Referer Trust".ToLower()))
            {
                string sCWEID = "CWE-293";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Code Injection".ToLower()))
            {
                string sCWEID = "CWE-94";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Path Disclosure".ToLower()))
            {
                string sCWEID = "CWE-209";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Privacy Notification".ToLower()))
            {
                string sCWEID = "CWE-359";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Privilege Escalation".ToLower()))
            {
                string sCWEID = "CWE-264";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Register Password".ToLower()))
            {
                string sCWEID = "CWE-521";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Remote File Inclusion".ToLower()))  //RFI
            {
                string sCWEID = "CWE-98";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Session Fixation".ToLower()))
            {
                string sCWEID = "CWE-384";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Session Hijacking".ToLower()))
            {
                string sCWEID = "CWE-264";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Session ID Random".ToLower()))
            {
                string sCWEID = "CWE-334";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Social Insurance Disclosure".ToLower()))
            {
                string sCWEID = "CWE-359";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Social Security Disclosure".ToLower()))
            {
                string sCWEID = "CWE-359";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("SQL Disclosure".ToLower()))
            {
                string sCWEID = "CWE-566";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("SQL Error".ToLower()))
            {
                string sCWEID = "CWE-209";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("SSI Injection".ToLower()))
            {
                string sCWEID = "CWE-97";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Unix Command Injection".ToLower()))
            {
                string sCWEID = "CWE-78";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Unix Relative Path".ToLower()))
            {
                string sCWEID = "CWE-22";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("URL In Query".ToLower()))
            {
                string sCWEID = "CWE-598";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Username or Password in HTTP Request".ToLower()))
            {
                string sCWEID = "CWE-200";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
                sCWEID = "CWE-261";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Weak Password".ToLower()))
            {
                string sCWEID = "CWE-521";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Web Server Configuration".ToLower()))
            {
                string sCWEID = "CWE-529";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
                sCWEID = "CWE-552";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Web Server".ToLower()) && temptitle.Contains("Vuln".ToLower()))
            {
                string sCWEID = "CWE-200";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Windows Command Injection".ToLower()))
            {
                string sCWEID = "CWE-78";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
            if (temptitle.Contains("Windows Relative Path".ToLower()))
            {
                string sCWEID = "CWE-22";
                AddNewVULNERABILITYCWE(VS, sCWEID);
                //"CAPEC-
            }
        }

        static void AddNewVULNERABILITYCWE(VULNERABILITY VS, string sCWEID)
        {
            try
            {
                XVULNERABILITYEntities vul_model = new XVULNERABILITYEntities();
                //VS.CWE.Add(myCWE);
                VULNERABILITYFORCWE VulnCWE = new VULNERABILITYFORCWE();
                VulnCWE.VulnerabilityID = VS.VulnerabilityID;
                VulnCWE.CWEID = sCWEID;
                VulnCWE.CreatedDate = DateTimeOffset.Now;
                VulnCWE.timestamp = DateTimeOffset.Now;
                //VulnCWE.VocabularyID=   //TODO
                vul_model.VULNERABILITYFORCWE.Add(VulnCWE);
                vul_model.SaveChanges();
            }
            catch (Exception exAddNewVULNERABILITYCWE)
            {
                Utils.Helper_Trace("XORCISM PROVIDER COMMON", "Exception exAddNewVULNERABILITYCWE " + sCWEID + " " + exAddNewVULNERABILITYCWE.Message + " " + exAddNewVULNERABILITYCWE.InnerException);
            }
        }
    }
}
